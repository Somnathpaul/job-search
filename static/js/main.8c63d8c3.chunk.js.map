{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchBox/searchBox-component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","jobs","company_logo","style","height","width","title","type","company","location","CardList","map","data","key","id","SearchBox","placeholder","handelChange","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","jsonData","this","filterJobs","filter","toLowerCase","includes","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6TAIaA,G,MAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,QACX,yBAAKC,IAAI,SAASC,IAAKH,EAAMI,KAAKC,aAAcC,MAAO,CAAEC,OAAQ,OAASC,MAAO,UACjF,sCAAYR,EAAMI,KAAKK,OACvB,qCAAWT,EAAMI,KAAKM,MACtB,yCAAeV,EAAMI,KAAKO,SAC1B,yCAAeX,EAAMI,KAAKQ,aCNrBC,G,MAAW,SAAAb,GAEpB,OACI,yBAAKC,UAAU,aAEXD,EAAMI,KAAKU,KAAK,SAAAC,GAAI,OAChB,kBAAC,EAAD,CAAMC,IAAKD,EAAKE,GAAIb,KAAMW,GAA1B,WCNHG,G,MAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,2BAAOnB,UAAW,SAASS,KAAK,SAC/BS,YAAaA,EACbE,SAAUD,MCwCCE,G,kBAtCb,aAAc,IAAD,8BACX,+CAeDF,aAAe,SAAAG,GACf,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAdpC,EAAKC,MAAQ,CACXxB,KAAK,GACLqB,YAAa,IALJ,E,iFASO,IAAD,OACjBI,MAAM,2DACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAQ,OAAI,EAAKT,SAAU,CAACpB,KAAM6B,S,+BAQlC,MAEsBC,KAAKN,MAA1BxB,EAFD,EAECA,KAAMqB,EAFP,EAEOA,YACPU,EAAa/B,EAAKgC,QAAQ,SAAArB,GAAI,OAAIA,EAAKN,MAAM4B,cAAcC,SAASb,EAAYY,kBAEtF,OACE,yBAAKpC,UAAU,OACb,0CACA,kBAAC,EAAD,CAAWkB,YAAY,aAAaC,aAAgBc,KAAKd,eACzD,kBAAC,EAAD,CAAUhB,KAAM+B,S,GA/BNI,cCKEC,QACW,cAA7BC,OAAO7B,SAAS8B,UAEe,UAA7BD,OAAO7B,SAAS8B,UAEhBD,OAAO7B,SAAS8B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.8c63d8c3.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.css';\n\nexport const Card = (props)=> (\n    <div className=\"card\">\n        <img alt=\"avatar\" src={props.jobs.company_logo} style={{ height: '50px' , width: '50px'}} />\n        <h4>Title: {props.jobs.title}</h4>\n        <h5>Type: {props.jobs.type}</h5>\n        <h5> Company: {props.jobs.company}</h5>\n        <h5>location: {props.jobs.location}</h5>\n        \n    </div>\n)","import React from 'react';\nimport {Card} from '../card/card.component';\nimport './card-list.css';\n\nexport const CardList = props => {\n\n    return (\n        <div className=\"card-list\">{\n    \n            props.jobs.map( data => (\n                <Card key={data.id} jobs={data}> </Card>\n                ))\n            \n        }\n        </div>)\n    }\n    \n\n\n","import React from 'react'\n\nimport './searchBox.css'\n\nexport const SearchBox  = ( {placeholder, handelChange})=> (\n   <input className= \"search\" type=\"search\"\n    placeholder={placeholder} \n    onChange={handelChange} />\n)\n","import React,{Component} from 'react';\n\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/searchBox/searchBox-component';\n\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n\n    this.state = {\n      jobs:[],\n      searchField: ''\n    }\n  }\n  // load data when website get loaded\n  componentDidMount(){\n    fetch('positions.json?description=javascript&location=new+york')\n    .then(response => response.json())\n    .then(jsonData => this.setState( {jobs: jsonData} ));\n  }\n\n  // arrow function will automatically bind the function with this\n   handelChange = e => {\n   this.setState({searchField: e.target.value})\n  }\n\n  render(){\n    // destructuring state \n    const {jobs, searchField} = this.state;\n    const filterJobs = jobs.filter( data => data.title.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1>Job Search</h1>\n        <SearchBox placeholder='full stack' handelChange = {this.handelChange}/>\n        <CardList jobs={filterJobs}></CardList>\n        \n        \n        \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}